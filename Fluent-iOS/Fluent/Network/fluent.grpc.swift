//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: fluent.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `FluentProto_ServerClient`, then call methods of this protocol to make API calls.
internal protocol FluentProto_ServerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: FluentProto_ServerClientInterceptorFactoryProtocol? { get }

  func signUp(
    _ request: FluentProto_SignUpData,
    callOptions: CallOptions?
  ) -> UnaryCall<FluentProto_SignUpData, FluentProto_IsCorrectQuery>

  func login(
    _ request: FluentProto_UserData,
    callOptions: CallOptions?
  ) -> UnaryCall<FluentProto_UserData, FluentProto_LoginInfo>

  func addLanguageToUser(
    _ request: FluentProto_UserFullData,
    callOptions: CallOptions?
  ) -> UnaryCall<FluentProto_UserFullData, FluentProto_IsCorrectQuery>

  func getCourses(
    _ request: FluentProto_UserInfoForCourse,
    callOptions: CallOptions?
  ) -> UnaryCall<FluentProto_UserInfoForCourse, FluentProto_UserCourses>

  func getLesson(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions?,
    handler: @escaping (FluentProto_Exercise) -> Void
  ) -> ServerStreamingCall<FluentProto_CourseGeneralInfo, FluentProto_Exercise>

  func getLessonName(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<FluentProto_CourseGeneralInfo, FluentProto_LessonName>

  func lessonIsDone(
    _ request: FluentProto_LessonUserInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<FluentProto_LessonUserInfo, FluentProto_CourseGeneralInfo>
}

extension FluentProto_ServerClientProtocol {
  internal var serviceName: String {
    return "fluent_proto.Server"
  }

  /// Unary call to SignUp
  ///
  /// - Parameters:
  ///   - request: Request to send to SignUp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signUp(
    _ request: FluentProto_SignUpData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FluentProto_SignUpData, FluentProto_IsCorrectQuery> {
    return self.makeUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.signUp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignUpInterceptors() ?? []
    )
  }

  ///returns true if user is signed up, else false
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login(
    _ request: FluentProto_UserData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FluentProto_UserData, FluentProto_LoginInfo> {
    return self.makeUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  /// Unary call to AddLanguageToUser
  ///
  /// - Parameters:
  ///   - request: Request to send to AddLanguageToUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addLanguageToUser(
    _ request: FluentProto_UserFullData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FluentProto_UserFullData, FluentProto_IsCorrectQuery> {
    return self.makeUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.addLanguageToUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLanguageToUserInterceptors() ?? []
    )
  }

  /// Unary call to GetCourses
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCourses.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCourses(
    _ request: FluentProto_UserInfoForCourse,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FluentProto_UserInfoForCourse, FluentProto_UserCourses> {
    return self.makeUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.getCourses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCoursesInterceptors() ?? []
    )
  }

  /// Server streaming call to GetLesson
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLesson.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getLesson(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions? = nil,
    handler: @escaping (FluentProto_Exercise) -> Void
  ) -> ServerStreamingCall<FluentProto_CourseGeneralInfo, FluentProto_Exercise> {
    return self.makeServerStreamingCall(
      path: FluentProto_ServerClientMetadata.Methods.getLesson.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLessonInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to GetLessonName
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLessonName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLessonName(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FluentProto_CourseGeneralInfo, FluentProto_LessonName> {
    return self.makeUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.getLessonName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLessonNameInterceptors() ?? []
    )
  }

  ///returns lesson name
  ///
  /// - Parameters:
  ///   - request: Request to send to LessonIsDone.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lessonIsDone(
    _ request: FluentProto_LessonUserInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FluentProto_LessonUserInfo, FluentProto_CourseGeneralInfo> {
    return self.makeUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.lessonIsDone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLessonIsDoneInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension FluentProto_ServerClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "FluentProto_ServerNIOClient")
internal final class FluentProto_ServerClient: FluentProto_ServerClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: FluentProto_ServerClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: FluentProto_ServerClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the fluent_proto.Server service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FluentProto_ServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct FluentProto_ServerNIOClient: FluentProto_ServerClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: FluentProto_ServerClientInterceptorFactoryProtocol?

  /// Creates a client for the fluent_proto.Server service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FluentProto_ServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol FluentProto_ServerAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FluentProto_ServerClientInterceptorFactoryProtocol? { get }

  func makeSignUpCall(
    _ request: FluentProto_SignUpData,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FluentProto_SignUpData, FluentProto_IsCorrectQuery>

  func makeLoginCall(
    _ request: FluentProto_UserData,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FluentProto_UserData, FluentProto_LoginInfo>

  func makeAddLanguageToUserCall(
    _ request: FluentProto_UserFullData,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FluentProto_UserFullData, FluentProto_IsCorrectQuery>

  func makeGetCoursesCall(
    _ request: FluentProto_UserInfoForCourse,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FluentProto_UserInfoForCourse, FluentProto_UserCourses>

  func makeGetLessonCall(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<FluentProto_CourseGeneralInfo, FluentProto_Exercise>

  func makeGetLessonNameCall(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FluentProto_CourseGeneralInfo, FluentProto_LessonName>

  func makeLessonIsDoneCall(
    _ request: FluentProto_LessonUserInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FluentProto_LessonUserInfo, FluentProto_CourseGeneralInfo>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FluentProto_ServerAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return FluentProto_ServerClientMetadata.serviceDescriptor
  }

  internal var interceptors: FluentProto_ServerClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSignUpCall(
    _ request: FluentProto_SignUpData,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FluentProto_SignUpData, FluentProto_IsCorrectQuery> {
    return self.makeAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.signUp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignUpInterceptors() ?? []
    )
  }

  internal func makeLoginCall(
    _ request: FluentProto_UserData,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FluentProto_UserData, FluentProto_LoginInfo> {
    return self.makeAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  internal func makeAddLanguageToUserCall(
    _ request: FluentProto_UserFullData,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FluentProto_UserFullData, FluentProto_IsCorrectQuery> {
    return self.makeAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.addLanguageToUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLanguageToUserInterceptors() ?? []
    )
  }

  internal func makeGetCoursesCall(
    _ request: FluentProto_UserInfoForCourse,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FluentProto_UserInfoForCourse, FluentProto_UserCourses> {
    return self.makeAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.getCourses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCoursesInterceptors() ?? []
    )
  }

  internal func makeGetLessonCall(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<FluentProto_CourseGeneralInfo, FluentProto_Exercise> {
    return self.makeAsyncServerStreamingCall(
      path: FluentProto_ServerClientMetadata.Methods.getLesson.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLessonInterceptors() ?? []
    )
  }

  internal func makeGetLessonNameCall(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FluentProto_CourseGeneralInfo, FluentProto_LessonName> {
    return self.makeAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.getLessonName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLessonNameInterceptors() ?? []
    )
  }

  internal func makeLessonIsDoneCall(
    _ request: FluentProto_LessonUserInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FluentProto_LessonUserInfo, FluentProto_CourseGeneralInfo> {
    return self.makeAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.lessonIsDone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLessonIsDoneInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FluentProto_ServerAsyncClientProtocol {
  internal func signUp(
    _ request: FluentProto_SignUpData,
    callOptions: CallOptions? = nil
  ) async throws -> FluentProto_IsCorrectQuery {
    return try await self.performAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.signUp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignUpInterceptors() ?? []
    )
  }

  internal func login(
    _ request: FluentProto_UserData,
    callOptions: CallOptions? = nil
  ) async throws -> FluentProto_LoginInfo {
    return try await self.performAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  internal func addLanguageToUser(
    _ request: FluentProto_UserFullData,
    callOptions: CallOptions? = nil
  ) async throws -> FluentProto_IsCorrectQuery {
    return try await self.performAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.addLanguageToUser.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLanguageToUserInterceptors() ?? []
    )
  }

  internal func getCourses(
    _ request: FluentProto_UserInfoForCourse,
    callOptions: CallOptions? = nil
  ) async throws -> FluentProto_UserCourses {
    return try await self.performAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.getCourses.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCoursesInterceptors() ?? []
    )
  }

  internal func getLesson(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FluentProto_Exercise> {
    return self.performAsyncServerStreamingCall(
      path: FluentProto_ServerClientMetadata.Methods.getLesson.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLessonInterceptors() ?? []
    )
  }

  internal func getLessonName(
    _ request: FluentProto_CourseGeneralInfo,
    callOptions: CallOptions? = nil
  ) async throws -> FluentProto_LessonName {
    return try await self.performAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.getLessonName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLessonNameInterceptors() ?? []
    )
  }

  internal func lessonIsDone(
    _ request: FluentProto_LessonUserInfo,
    callOptions: CallOptions? = nil
  ) async throws -> FluentProto_CourseGeneralInfo {
    return try await self.performAsyncUnaryCall(
      path: FluentProto_ServerClientMetadata.Methods.lessonIsDone.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLessonIsDoneInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct FluentProto_ServerAsyncClient: FluentProto_ServerAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: FluentProto_ServerClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: FluentProto_ServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol FluentProto_ServerClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'signUp'.
  func makeSignUpInterceptors() -> [ClientInterceptor<FluentProto_SignUpData, FluentProto_IsCorrectQuery>]

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeLoginInterceptors() -> [ClientInterceptor<FluentProto_UserData, FluentProto_LoginInfo>]

  /// - Returns: Interceptors to use when invoking 'addLanguageToUser'.
  func makeAddLanguageToUserInterceptors() -> [ClientInterceptor<FluentProto_UserFullData, FluentProto_IsCorrectQuery>]

  /// - Returns: Interceptors to use when invoking 'getCourses'.
  func makeGetCoursesInterceptors() -> [ClientInterceptor<FluentProto_UserInfoForCourse, FluentProto_UserCourses>]

  /// - Returns: Interceptors to use when invoking 'getLesson'.
  func makeGetLessonInterceptors() -> [ClientInterceptor<FluentProto_CourseGeneralInfo, FluentProto_Exercise>]

  /// - Returns: Interceptors to use when invoking 'getLessonName'.
  func makeGetLessonNameInterceptors() -> [ClientInterceptor<FluentProto_CourseGeneralInfo, FluentProto_LessonName>]

  /// - Returns: Interceptors to use when invoking 'lessonIsDone'.
  func makeLessonIsDoneInterceptors() -> [ClientInterceptor<FluentProto_LessonUserInfo, FluentProto_CourseGeneralInfo>]
}

internal enum FluentProto_ServerClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Server",
    fullName: "fluent_proto.Server",
    methods: [
      FluentProto_ServerClientMetadata.Methods.signUp,
      FluentProto_ServerClientMetadata.Methods.login,
      FluentProto_ServerClientMetadata.Methods.addLanguageToUser,
      FluentProto_ServerClientMetadata.Methods.getCourses,
      FluentProto_ServerClientMetadata.Methods.getLesson,
      FluentProto_ServerClientMetadata.Methods.getLessonName,
      FluentProto_ServerClientMetadata.Methods.lessonIsDone,
    ]
  )

  internal enum Methods {
    internal static let signUp = GRPCMethodDescriptor(
      name: "SignUp",
      path: "/fluent_proto.Server/SignUp",
      type: GRPCCallType.unary
    )

    internal static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/fluent_proto.Server/Login",
      type: GRPCCallType.unary
    )

    internal static let addLanguageToUser = GRPCMethodDescriptor(
      name: "AddLanguageToUser",
      path: "/fluent_proto.Server/AddLanguageToUser",
      type: GRPCCallType.unary
    )

    internal static let getCourses = GRPCMethodDescriptor(
      name: "GetCourses",
      path: "/fluent_proto.Server/GetCourses",
      type: GRPCCallType.unary
    )

    internal static let getLesson = GRPCMethodDescriptor(
      name: "GetLesson",
      path: "/fluent_proto.Server/GetLesson",
      type: GRPCCallType.serverStreaming
    )

    internal static let getLessonName = GRPCMethodDescriptor(
      name: "GetLessonName",
      path: "/fluent_proto.Server/GetLessonName",
      type: GRPCCallType.unary
    )

    internal static let lessonIsDone = GRPCMethodDescriptor(
      name: "LessonIsDone",
      path: "/fluent_proto.Server/LessonIsDone",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol FluentProto_ServerProvider: CallHandlerProvider {
  var interceptors: FluentProto_ServerServerInterceptorFactoryProtocol? { get }

  func signUp(request: FluentProto_SignUpData, context: StatusOnlyCallContext) -> EventLoopFuture<FluentProto_IsCorrectQuery>

  ///returns true if user is signed up, else false
  func login(request: FluentProto_UserData, context: StatusOnlyCallContext) -> EventLoopFuture<FluentProto_LoginInfo>

  func addLanguageToUser(request: FluentProto_UserFullData, context: StatusOnlyCallContext) -> EventLoopFuture<FluentProto_IsCorrectQuery>

  func getCourses(request: FluentProto_UserInfoForCourse, context: StatusOnlyCallContext) -> EventLoopFuture<FluentProto_UserCourses>

  func getLesson(request: FluentProto_CourseGeneralInfo, context: StreamingResponseCallContext<FluentProto_Exercise>) -> EventLoopFuture<GRPCStatus>

  func getLessonName(request: FluentProto_CourseGeneralInfo, context: StatusOnlyCallContext) -> EventLoopFuture<FluentProto_LessonName>

  ///returns lesson name
  func lessonIsDone(request: FluentProto_LessonUserInfo, context: StatusOnlyCallContext) -> EventLoopFuture<FluentProto_CourseGeneralInfo>
}

extension FluentProto_ServerProvider {
  internal var serviceName: Substring {
    return FluentProto_ServerServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SignUp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_SignUpData>(),
        responseSerializer: ProtobufSerializer<FluentProto_IsCorrectQuery>(),
        interceptors: self.interceptors?.makeSignUpInterceptors() ?? [],
        userFunction: self.signUp(request:context:)
      )

    case "Login":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_UserData>(),
        responseSerializer: ProtobufSerializer<FluentProto_LoginInfo>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        userFunction: self.login(request:context:)
      )

    case "AddLanguageToUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_UserFullData>(),
        responseSerializer: ProtobufSerializer<FluentProto_IsCorrectQuery>(),
        interceptors: self.interceptors?.makeAddLanguageToUserInterceptors() ?? [],
        userFunction: self.addLanguageToUser(request:context:)
      )

    case "GetCourses":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_UserInfoForCourse>(),
        responseSerializer: ProtobufSerializer<FluentProto_UserCourses>(),
        interceptors: self.interceptors?.makeGetCoursesInterceptors() ?? [],
        userFunction: self.getCourses(request:context:)
      )

    case "GetLesson":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_CourseGeneralInfo>(),
        responseSerializer: ProtobufSerializer<FluentProto_Exercise>(),
        interceptors: self.interceptors?.makeGetLessonInterceptors() ?? [],
        userFunction: self.getLesson(request:context:)
      )

    case "GetLessonName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_CourseGeneralInfo>(),
        responseSerializer: ProtobufSerializer<FluentProto_LessonName>(),
        interceptors: self.interceptors?.makeGetLessonNameInterceptors() ?? [],
        userFunction: self.getLessonName(request:context:)
      )

    case "LessonIsDone":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_LessonUserInfo>(),
        responseSerializer: ProtobufSerializer<FluentProto_CourseGeneralInfo>(),
        interceptors: self.interceptors?.makeLessonIsDoneInterceptors() ?? [],
        userFunction: self.lessonIsDone(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol FluentProto_ServerAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: FluentProto_ServerServerInterceptorFactoryProtocol? { get }

  func signUp(
    request: FluentProto_SignUpData,
    context: GRPCAsyncServerCallContext
  ) async throws -> FluentProto_IsCorrectQuery

  ///returns true if user is signed up, else false
  func login(
    request: FluentProto_UserData,
    context: GRPCAsyncServerCallContext
  ) async throws -> FluentProto_LoginInfo

  func addLanguageToUser(
    request: FluentProto_UserFullData,
    context: GRPCAsyncServerCallContext
  ) async throws -> FluentProto_IsCorrectQuery

  func getCourses(
    request: FluentProto_UserInfoForCourse,
    context: GRPCAsyncServerCallContext
  ) async throws -> FluentProto_UserCourses

  func getLesson(
    request: FluentProto_CourseGeneralInfo,
    responseStream: GRPCAsyncResponseStreamWriter<FluentProto_Exercise>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func getLessonName(
    request: FluentProto_CourseGeneralInfo,
    context: GRPCAsyncServerCallContext
  ) async throws -> FluentProto_LessonName

  ///returns lesson name
  func lessonIsDone(
    request: FluentProto_LessonUserInfo,
    context: GRPCAsyncServerCallContext
  ) async throws -> FluentProto_CourseGeneralInfo
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension FluentProto_ServerAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return FluentProto_ServerServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return FluentProto_ServerServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: FluentProto_ServerServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SignUp":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_SignUpData>(),
        responseSerializer: ProtobufSerializer<FluentProto_IsCorrectQuery>(),
        interceptors: self.interceptors?.makeSignUpInterceptors() ?? [],
        wrapping: { try await self.signUp(request: $0, context: $1) }
      )

    case "Login":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_UserData>(),
        responseSerializer: ProtobufSerializer<FluentProto_LoginInfo>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        wrapping: { try await self.login(request: $0, context: $1) }
      )

    case "AddLanguageToUser":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_UserFullData>(),
        responseSerializer: ProtobufSerializer<FluentProto_IsCorrectQuery>(),
        interceptors: self.interceptors?.makeAddLanguageToUserInterceptors() ?? [],
        wrapping: { try await self.addLanguageToUser(request: $0, context: $1) }
      )

    case "GetCourses":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_UserInfoForCourse>(),
        responseSerializer: ProtobufSerializer<FluentProto_UserCourses>(),
        interceptors: self.interceptors?.makeGetCoursesInterceptors() ?? [],
        wrapping: { try await self.getCourses(request: $0, context: $1) }
      )

    case "GetLesson":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_CourseGeneralInfo>(),
        responseSerializer: ProtobufSerializer<FluentProto_Exercise>(),
        interceptors: self.interceptors?.makeGetLessonInterceptors() ?? [],
        wrapping: { try await self.getLesson(request: $0, responseStream: $1, context: $2) }
      )

    case "GetLessonName":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_CourseGeneralInfo>(),
        responseSerializer: ProtobufSerializer<FluentProto_LessonName>(),
        interceptors: self.interceptors?.makeGetLessonNameInterceptors() ?? [],
        wrapping: { try await self.getLessonName(request: $0, context: $1) }
      )

    case "LessonIsDone":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FluentProto_LessonUserInfo>(),
        responseSerializer: ProtobufSerializer<FluentProto_CourseGeneralInfo>(),
        interceptors: self.interceptors?.makeLessonIsDoneInterceptors() ?? [],
        wrapping: { try await self.lessonIsDone(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol FluentProto_ServerServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'signUp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignUpInterceptors() -> [ServerInterceptor<FluentProto_SignUpData, FluentProto_IsCorrectQuery>]

  /// - Returns: Interceptors to use when handling 'login'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoginInterceptors() -> [ServerInterceptor<FluentProto_UserData, FluentProto_LoginInfo>]

  /// - Returns: Interceptors to use when handling 'addLanguageToUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddLanguageToUserInterceptors() -> [ServerInterceptor<FluentProto_UserFullData, FluentProto_IsCorrectQuery>]

  /// - Returns: Interceptors to use when handling 'getCourses'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCoursesInterceptors() -> [ServerInterceptor<FluentProto_UserInfoForCourse, FluentProto_UserCourses>]

  /// - Returns: Interceptors to use when handling 'getLesson'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLessonInterceptors() -> [ServerInterceptor<FluentProto_CourseGeneralInfo, FluentProto_Exercise>]

  /// - Returns: Interceptors to use when handling 'getLessonName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLessonNameInterceptors() -> [ServerInterceptor<FluentProto_CourseGeneralInfo, FluentProto_LessonName>]

  /// - Returns: Interceptors to use when handling 'lessonIsDone'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLessonIsDoneInterceptors() -> [ServerInterceptor<FluentProto_LessonUserInfo, FluentProto_CourseGeneralInfo>]
}

internal enum FluentProto_ServerServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Server",
    fullName: "fluent_proto.Server",
    methods: [
      FluentProto_ServerServerMetadata.Methods.signUp,
      FluentProto_ServerServerMetadata.Methods.login,
      FluentProto_ServerServerMetadata.Methods.addLanguageToUser,
      FluentProto_ServerServerMetadata.Methods.getCourses,
      FluentProto_ServerServerMetadata.Methods.getLesson,
      FluentProto_ServerServerMetadata.Methods.getLessonName,
      FluentProto_ServerServerMetadata.Methods.lessonIsDone,
    ]
  )

  internal enum Methods {
    internal static let signUp = GRPCMethodDescriptor(
      name: "SignUp",
      path: "/fluent_proto.Server/SignUp",
      type: GRPCCallType.unary
    )

    internal static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/fluent_proto.Server/Login",
      type: GRPCCallType.unary
    )

    internal static let addLanguageToUser = GRPCMethodDescriptor(
      name: "AddLanguageToUser",
      path: "/fluent_proto.Server/AddLanguageToUser",
      type: GRPCCallType.unary
    )

    internal static let getCourses = GRPCMethodDescriptor(
      name: "GetCourses",
      path: "/fluent_proto.Server/GetCourses",
      type: GRPCCallType.unary
    )

    internal static let getLesson = GRPCMethodDescriptor(
      name: "GetLesson",
      path: "/fluent_proto.Server/GetLesson",
      type: GRPCCallType.serverStreaming
    )

    internal static let getLessonName = GRPCMethodDescriptor(
      name: "GetLessonName",
      path: "/fluent_proto.Server/GetLessonName",
      type: GRPCCallType.unary
    )

    internal static let lessonIsDone = GRPCMethodDescriptor(
      name: "LessonIsDone",
      path: "/fluent_proto.Server/LessonIsDone",
      type: GRPCCallType.unary
    )
  }
}
