// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: fluent.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum FluentProto_LanguageLevel: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case a1 // = 0
  case a2 // = 1
  case b1 // = 2
  case b2 // = 3
  case c1 // = 4
  case c2 // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .a1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .a1
    case 1: self = .a2
    case 2: self = .b1
    case 3: self = .b2
    case 4: self = .c1
    case 5: self = .c2
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .a1: return 0
    case .a2: return 1
    case .b1: return 2
    case .b2: return 3
    case .c1: return 4
    case .c2: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FluentProto_LanguageLevel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [FluentProto_LanguageLevel] = [
    .a1,
    .a2,
    .b1,
    .b2,
    .c1,
    .c2,
  ]
}

#endif  // swift(>=4.2)

enum FluentProto_Language: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case english // = 0
  case russian // = 1
  case spanish // = 2
  case french // = 3
  case german // = 4
  case japanese // = 5
  case chinese // = 6
  case polish // = 7
  case ukrainian // = 8
  case arabic // = 9
  case portuguese // = 10
  case hindi // = 12
  case bengali // = 13
  case punjabi // = 14
  case urdu // = 15
  case mandarin // = 16
  case hindustani // = 17
  case indonesian // = 18
  case UNRECOGNIZED(Int)

  init() {
    self = .english
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .english
    case 1: self = .russian
    case 2: self = .spanish
    case 3: self = .french
    case 4: self = .german
    case 5: self = .japanese
    case 6: self = .chinese
    case 7: self = .polish
    case 8: self = .ukrainian
    case 9: self = .arabic
    case 10: self = .portuguese
    case 12: self = .hindi
    case 13: self = .bengali
    case 14: self = .punjabi
    case 15: self = .urdu
    case 16: self = .mandarin
    case 17: self = .hindustani
    case 18: self = .indonesian
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .english: return 0
    case .russian: return 1
    case .spanish: return 2
    case .french: return 3
    case .german: return 4
    case .japanese: return 5
    case .chinese: return 6
    case .polish: return 7
    case .ukrainian: return 8
    case .arabic: return 9
    case .portuguese: return 10
    case .hindi: return 12
    case .bengali: return 13
    case .punjabi: return 14
    case .urdu: return 15
    case .mandarin: return 16
    case .hindustani: return 17
    case .indonesian: return 18
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FluentProto_Language: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [FluentProto_Language] = [
    .english,
    .russian,
    .spanish,
    .french,
    .german,
    .japanese,
    .chinese,
    .polish,
    .ukrainian,
    .arabic,
    .portuguese,
    .hindi,
    .bengali,
    .punjabi,
    .urdu,
    .mandarin,
    .hindustani,
    .indonesian,
  ]
}

#endif  // swift(>=4.2)

enum FluentProto_ExerciseType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case crossword // = 0
  case wordInsertionWithAnswerOptions // = 1
  case wordInsertion // = 2
  case listening // = 3
  case reading // = 4
  case speaking // = 5
  case wordCards // = 6
  case learning // = 7
  case general // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .crossword
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .crossword
    case 1: self = .wordInsertionWithAnswerOptions
    case 2: self = .wordInsertion
    case 3: self = .listening
    case 4: self = .reading
    case 5: self = .speaking
    case 6: self = .wordCards
    case 7: self = .learning
    case 8: self = .general
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .crossword: return 0
    case .wordInsertionWithAnswerOptions: return 1
    case .wordInsertion: return 2
    case .listening: return 3
    case .reading: return 4
    case .speaking: return 5
    case .wordCards: return 6
    case .learning: return 7
    case .general: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FluentProto_ExerciseType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [FluentProto_ExerciseType] = [
    .crossword,
    .wordInsertionWithAnswerOptions,
    .wordInsertion,
    .listening,
    .reading,
    .speaking,
    .wordCards,
    .learning,
    .general,
  ]
}

#endif  // swift(>=4.2)

enum FluentProto_Error: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case incorrectLogin // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .incorrectLogin
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .incorrectLogin
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .incorrectLogin: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FluentProto_Error: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [FluentProto_Error] = [
    .incorrectLogin,
  ]
}

#endif  // swift(>=4.2)

struct FluentProto_UserInfoForCourse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var courseType: FluentProto_ExerciseType = .crossword

  var level: FluentProto_LanguageLevel = .a1

  var languageTo: FluentProto_Language = .english

  var languageFrom: FluentProto_Language = .english

  var email: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_Exercise {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 = 0

  var complexity: Int32 = 0

  var type: FluentProto_ExerciseType = .crossword

  var languageFrom: FluentProto_Language = .english

  var languageTo: FluentProto_Language = .english

  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_SignUpData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var password: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_CourseGeneralInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 = 0

  var name: String = String()

  var lessonsCount: UInt32 = 0

  var userLessonIndex: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_LessonUserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var courseID: Int32 = 0

  var email: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_UserData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var password: String = String()

  var languageFrom: FluentProto_Language = .english

  var languageTo: FluentProto_Language = .english

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_UserFullData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var username: String = String()

  var password: String = String()

  var level: FluentProto_LanguageLevel = .a1

  var languageFrom: FluentProto_Language = .english

  var languageTo: FluentProto_Language = .english

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_LoginInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: FluentProto_LoginInfo.OneOf_Data? = nil

  var loginError: FluentProto_Error {
    get {
      if case .loginError(let v)? = data {return v}
      return .incorrectLogin
    }
    set {data = .loginError(newValue)}
  }

  var userData: FluentProto_UserFullData {
    get {
      if case .userData(let v)? = data {return v}
      return FluentProto_UserFullData()
    }
    set {data = .userData(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case loginError(FluentProto_Error)
    case userData(FluentProto_UserFullData)

  #if !swift(>=4.1)
    static func ==(lhs: FluentProto_LoginInfo.OneOf_Data, rhs: FluentProto_LoginInfo.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.loginError, .loginError): return {
        guard case .loginError(let l) = lhs, case .loginError(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userData, .userData): return {
        guard case .userData(let l) = lhs, case .userData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct FluentProto_UserCourses {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var courses: [FluentProto_CourseGeneralInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_LessonName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FluentProto_IsCorrectQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isCorrect: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension FluentProto_LanguageLevel: @unchecked Sendable {}
extension FluentProto_Language: @unchecked Sendable {}
extension FluentProto_ExerciseType: @unchecked Sendable {}
extension FluentProto_Error: @unchecked Sendable {}
extension FluentProto_UserInfoForCourse: @unchecked Sendable {}
extension FluentProto_Exercise: @unchecked Sendable {}
extension FluentProto_SignUpData: @unchecked Sendable {}
extension FluentProto_CourseGeneralInfo: @unchecked Sendable {}
extension FluentProto_LessonUserInfo: @unchecked Sendable {}
extension FluentProto_UserData: @unchecked Sendable {}
extension FluentProto_UserFullData: @unchecked Sendable {}
extension FluentProto_LoginInfo: @unchecked Sendable {}
extension FluentProto_LoginInfo.OneOf_Data: @unchecked Sendable {}
extension FluentProto_UserCourses: @unchecked Sendable {}
extension FluentProto_LessonName: @unchecked Sendable {}
extension FluentProto_IsCorrectQuery: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "fluent_proto"

extension FluentProto_LanguageLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LANGUAGE_LEVEL_A1"),
    1: .same(proto: "LANGUAGE_LEVEL_A2"),
    2: .same(proto: "LANGUAGE_LEVEL_B1"),
    3: .same(proto: "LANGUAGE_LEVEL_B2"),
    4: .same(proto: "LANGUAGE_LEVEL_C1"),
    5: .same(proto: "LANGUAGE_LEVEL_C2"),
  ]
}

extension FluentProto_Language: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LANGUAGE_ENGLISH"),
    1: .same(proto: "LANGUAGE_RUSSIAN"),
    2: .same(proto: "LANGUAGE_SPANISH"),
    3: .same(proto: "LANGUAGE_FRENCH"),
    4: .same(proto: "LANGUAGE_GERMAN"),
    5: .same(proto: "LANGUAGE_JAPANESE"),
    6: .same(proto: "LANGUAGE_CHINESE"),
    7: .same(proto: "LANGUAGE_POLISH"),
    8: .same(proto: "LANGUAGE_UKRAINIAN"),
    9: .same(proto: "LANGUAGE_ARABIC"),
    10: .same(proto: "LANGUAGE_PORTUGUESE"),
    12: .same(proto: "LANGUAGE_HINDI"),
    13: .same(proto: "LANGUAGE_BENGALI"),
    14: .same(proto: "LANGUAGE_PUNJABI"),
    15: .same(proto: "LANGUAGE_URDU"),
    16: .same(proto: "LANGUAGE_MANDARIN"),
    17: .same(proto: "LANGUAGE_HINDUSTANI"),
    18: .same(proto: "LANGUAGE_INDONESIAN"),
  ]
}

extension FluentProto_ExerciseType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXERCISE_TYPE_CROSSWORD"),
    1: .same(proto: "EXERCISE_TYPE_WORD_INSERTION_WITH_ANSWER_OPTIONS"),
    2: .same(proto: "EXERCISE_TYPE_WORD_INSERTION"),
    3: .same(proto: "EXERCISE_TYPE_LISTENING"),
    4: .same(proto: "EXERCISE_TYPE_READING"),
    5: .same(proto: "EXERCISE_TYPE_SPEAKING"),
    6: .same(proto: "EXERCISE_TYPE_WORD_CARDS"),
    7: .same(proto: "EXERCISE_TYPE_LEARNING"),
    8: .same(proto: "EXERCISE_TYPE_GENERAL"),
  ]
}

extension FluentProto_Error: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERROR_INCORRECT_LOGIN"),
  ]
}

extension FluentProto_UserInfoForCourse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfoForCourse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "course_type"),
    2: .same(proto: "level"),
    3: .standard(proto: "language_to"),
    4: .standard(proto: "language_from"),
    5: .same(proto: "email"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.courseType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.languageTo) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.languageFrom) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseType != .crossword {
      try visitor.visitSingularEnumField(value: self.courseType, fieldNumber: 1)
    }
    if self.level != .a1 {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 2)
    }
    if self.languageTo != .english {
      try visitor.visitSingularEnumField(value: self.languageTo, fieldNumber: 3)
    }
    if self.languageFrom != .english {
      try visitor.visitSingularEnumField(value: self.languageFrom, fieldNumber: 4)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_UserInfoForCourse, rhs: FluentProto_UserInfoForCourse) -> Bool {
    if lhs.courseType != rhs.courseType {return false}
    if lhs.level != rhs.level {return false}
    if lhs.languageTo != rhs.languageTo {return false}
    if lhs.languageFrom != rhs.languageFrom {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_Exercise: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Exercise"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "complexity"),
    3: .same(proto: "type"),
    4: .standard(proto: "language_from"),
    5: .standard(proto: "language_to"),
    6: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.complexity) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.languageFrom) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.languageTo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.complexity != 0 {
      try visitor.visitSingularInt32Field(value: self.complexity, fieldNumber: 2)
    }
    if self.type != .crossword {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.languageFrom != .english {
      try visitor.visitSingularEnumField(value: self.languageFrom, fieldNumber: 4)
    }
    if self.languageTo != .english {
      try visitor.visitSingularEnumField(value: self.languageTo, fieldNumber: 5)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_Exercise, rhs: FluentProto_Exercise) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.complexity != rhs.complexity {return false}
    if lhs.type != rhs.type {return false}
    if lhs.languageFrom != rhs.languageFrom {return false}
    if lhs.languageTo != rhs.languageTo {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_SignUpData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignUpData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .same(proto: "password"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.password) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_SignUpData, rhs: FluentProto_SignUpData) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.password != rhs.password {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_CourseGeneralInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CourseGeneralInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .standard(proto: "lessons_count"),
    4: .standard(proto: "user_lesson_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.lessonsCount) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.userLessonIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.lessonsCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.lessonsCount, fieldNumber: 3)
    }
    if self.userLessonIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.userLessonIndex, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_CourseGeneralInfo, rhs: FluentProto_CourseGeneralInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.lessonsCount != rhs.lessonsCount {return false}
    if lhs.userLessonIndex != rhs.userLessonIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_LessonUserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LessonUserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "course_id"),
    2: .same(proto: "email"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.courseID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt32Field(value: self.courseID, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_LessonUserInfo, rhs: FluentProto_LessonUserInfo) -> Bool {
    if lhs.courseID != rhs.courseID {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_UserData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .same(proto: "password"),
    3: .standard(proto: "language_from"),
    4: .standard(proto: "language_to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.languageFrom) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.languageTo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if self.languageFrom != .english {
      try visitor.visitSingularEnumField(value: self.languageFrom, fieldNumber: 3)
    }
    if self.languageTo != .english {
      try visitor.visitSingularEnumField(value: self.languageTo, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_UserData, rhs: FluentProto_UserData) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.password != rhs.password {return false}
    if lhs.languageFrom != rhs.languageFrom {return false}
    if lhs.languageTo != rhs.languageTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_UserFullData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserFullData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "username"),
    2: .same(proto: "password"),
    3: .same(proto: "level"),
    4: .standard(proto: "language_from"),
    5: .standard(proto: "language_to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.username) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.password) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.languageFrom) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.languageTo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    if self.level != .a1 {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 3)
    }
    if self.languageFrom != .english {
      try visitor.visitSingularEnumField(value: self.languageFrom, fieldNumber: 4)
    }
    if self.languageTo != .english {
      try visitor.visitSingularEnumField(value: self.languageTo, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_UserFullData, rhs: FluentProto_UserFullData) -> Bool {
    if lhs.username != rhs.username {return false}
    if lhs.password != rhs.password {return false}
    if lhs.level != rhs.level {return false}
    if lhs.languageFrom != rhs.languageFrom {return false}
    if lhs.languageTo != rhs.languageTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_LoginInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LoginInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "login_error"),
    2: .standard(proto: "user_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: FluentProto_Error?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {
          if self.data != nil {try decoder.handleConflictingOneOf()}
          self.data = .loginError(v)
        }
      }()
      case 2: try {
        var v: FluentProto_UserFullData?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .userData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .userData(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.data {
    case .loginError?: try {
      guard case .loginError(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }()
    case .userData?: try {
      guard case .userData(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_LoginInfo, rhs: FluentProto_LoginInfo) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_UserCourses: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserCourses"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.courses) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.courses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.courses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_UserCourses, rhs: FluentProto_UserCourses) -> Bool {
    if lhs.courses != rhs.courses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_LessonName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LessonName"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_LessonName, rhs: FluentProto_LessonName) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FluentProto_IsCorrectQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IsCorrectQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_correct"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isCorrect) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isCorrect != false {
      try visitor.visitSingularBoolField(value: self.isCorrect, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FluentProto_IsCorrectQuery, rhs: FluentProto_IsCorrectQuery) -> Bool {
    if lhs.isCorrect != rhs.isCorrect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
